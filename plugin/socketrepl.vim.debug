let g:nvim_tcp_plugin_channel = 0
let g:manually_start_socket_repl_plugin = 1

function! Connect(host_colon_port, op_code)
    if a:host_colon_port == ""
        let conn = "localhost:5555"
    else
        let conn = a:host_colon_port
    endif
    let res = rpcrequest(g:nvim_tcp_plugin_channel, a:op_code, conn)
    return res
endfunction
command! -nargs=? Connect call Connect("<args>", "connect")
command! -nargs=? NConnect call Connect("<args>", "connect-nrepl")

function! EvalBuffer()
    ReplLog
    let res = rpcrequest(g:nvim_tcp_plugin_channel, 'eval-buffer', [])
    return res
endfunction
command! EvalBuffer call EvalBuffer()

function! EvalCode()
    ReplLog
    let res = rpcrequest(g:nvim_tcp_plugin_channel, 'eval-code', [])
    return res
endfunction
command! EvalCode call EvalCode()

function! ReplLog(buffer_cmd)
    let res = rpcrequest(g:nvim_tcp_plugin_channel, 'show-log', a:buffer_cmd)
    return res
endfunction
command! ReplLog call ReplLog(':botright new')

function! DismissReplLog()
    let res = rpcrequest(g:nvim_tcp_plugin_channel, 'dismiss-log', [])
    return res
endfunction
command! DismissReplLog call DismissReplLog()

function! Doc()
    ReplLog
    let res = rpcrequest(g:nvim_tcp_plugin_channel, 'doc', [])
    return res
endfunction
command! Doc call Doc()


if !exists('g:disable_socket_repl_mappings')
    nnoremap <leader>eb :EvalBuffer<cr>
    nnoremap <leader>ef :EvalCode<cr>
    nnoremap <leader>doc :Doc<cr>
    nnoremap <leader>rlog :ReplLog<cr>
    nnoremap <leader>drlog :DismissReplLog<cr>
endif

echo 'debug socket repl plugin loaded!'
